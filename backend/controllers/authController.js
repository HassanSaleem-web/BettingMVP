const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/User'); // adjust path as needed

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

exports.register = async(req, res) => {
    const { username, password } = req.body;
    console.log('üì• Registration request received');
    console.log('‚û°Ô∏è Username:', username);

    try {
        console.log('üîê Hashing password...');
        const hashed = await bcrypt.hash(password, 10);
        console.log('‚úÖ Password hashed successfully');

        console.log('üì¶ Creating new user object...');
        const newUser = new User({ username, password: hashed });

        console.log('üíæ Saving user to database...');
        await newUser.save();
        console.log('‚úÖ User saved successfully');

        // Generate JWT token
        const token = jwt.sign({ id: newUser._id, username: newUser.username }, JWT_SECRET, {
            expiresIn: '1d',
        });

        res.status(201).json({ token }); // ‚úÖ Return token
    } catch (err) {
        console.error('‚ùå Registration error:', err);
        res.status(500).json({ error: '‚ùå Registration failed' });
    }
};



exports.login = async(req, res) => {
    const { username, password } = req.body;
    try {
        const user = await User.findOne({ username });
        if (!user) return res.status(404).json({ error: '‚ùå User not found' });

        const match = await bcrypt.compare(password, user.password);
        if (!match) return res.status(401).json({ error: '‚ùå Invalid password' });

        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });
        res.json({ token });
    } catch (err) {
        res.status(500).json({ error: '‚ùå Login error' });
    }
};